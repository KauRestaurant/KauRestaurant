// <auto-generated />
using System;
using KauRestaurant.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KauRestaurant.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250419125508_newSeed")]
    partial class newSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KauRestaurant.Areas.Identity.Data.KauRestaurantUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KauRestaurant.Models.FAQ", b =>
                {
                    b.Property<int>("FAQID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FAQID"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("FAQID");

                    b.ToTable("FAQs");

                    b.HasData(
                        new
                        {
                            FAQID = 1,
                            Answer = "يمكنك شراء تذاكر الوجبات من خلال تسجيل الدخول إلى حسابك، ثم الانتقال إلى صفحة شراء التذاكر واختيار عدد الوجبات التي ترغب بها لكل فترة (الإفطار، الغداء، العشاء).",
                            DisplayOrder = 1,
                            Question = "كيف يمكنني شراء تذاكر وجبات؟"
                        },
                        new
                        {
                            FAQID = 2,
                            Answer = "يعمل المطعم من الأحد إلى الخميس، وساعات العمل هي: الإفطار من 7:00 صباحًا إلى 10:30 صباحًا، الغداء من 12:00 ظهرًا إلى 3:00 عصرًا، والعشاء من 6:00 مساءً إلى 10:00 مساءً.",
                            DisplayOrder = 2,
                            Question = "ما هي أوقات عمل المطعم؟"
                        },
                        new
                        {
                            FAQID = 3,
                            Answer = "بعد شراء التذاكر، يمكنك عرض جميع تذاكرك في صفحة 'تذاكري'. عند زيارة المطعم، ما عليك سوى إظهار رمز QR الخاص بالتذكرة للموظف ليتم مسحه وتأكيد استخدام الوجبة.",
                            DisplayOrder = 3,
                            Question = "كيف يمكنني استخدام التذاكر التي اشتريتها؟"
                        },
                        new
                        {
                            FAQID = 4,
                            Answer = "لا يمكن إلغاء التذاكر بعد الشراء. لذا يرجى التأكد من اختيارك قبل إتمام عملية الشراء.",
                            DisplayOrder = 4,
                            Question = "هل يمكنني إلغاء التذاكر التي اشتريتها؟"
                        },
                        new
                        {
                            FAQID = 5,
                            Answer = "نعم، يمكنك الاطلاع على قائمة الطعام الأسبوعية في صفحة 'القائمة' على موقعنا. يتم تحديث القائمة أسبوعياً.",
                            DisplayOrder = 5,
                            Question = "هل يمكنني معرفة قائمة الطعام مسبقاً؟"
                        });
                });

            modelBuilder.Entity("KauRestaurant.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("UserID");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("KauRestaurant.Models.Meal", b =>
                {
                    b.Property<int>("MealID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MealID"));

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<int>("Carbs")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Fat")
                        .HasColumnType("int");

                    b.Property<string>("MealCategory")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MealName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MealType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Protein")
                        .HasColumnType("int");

                    b.HasKey("MealID");

                    b.ToTable("Meals");

                    b.HasData(
                        new
                        {
                            MealID = 1,
                            Calories = 250,
                            Carbs = 45,
                            Description = "فطائر طازجة محشوة بالجبنة المشكلة المذابة، تقدم ساخنة مع زيت الزيتون والزعتر.",
                            Fat = 10,
                            MealCategory = "الإفطار",
                            MealName = "فطائر بالجبن",
                            MealType = "الطبق الرئيسي",
                            PicturePath = "/images/meal.png",
                            Protein = 8
                        },
                        new
                        {
                            MealID = 2,
                            Calories = 185,
                            Carbs = 2,
                            Description = "بيض مقلي على الطريقة العربية، يقدم مع الخبز العربي والخضروات الطازجة.",
                            Fat = 14,
                            MealCategory = "الإفطار",
                            MealName = "بيض مقلي",
                            MealType = "الطبق الرئيسي",
                            PicturePath = "/images/meal.png",
                            Protein = 12
                        },
                        new
                        {
                            MealID = 3,
                            Calories = 220,
                            Carbs = 35,
                            Description = "فول مدمس مطبوخ بالطريقة التقليدية مع زيت الزيتون والثوم والليمون، غني بالبروتين النباتي.",
                            Fat = 5,
                            MealCategory = "الإفطار",
                            MealName = "فول مدمس",
                            MealType = "طبق جانبي",
                            PicturePath = "/images/meal.png",
                            Protein = 15
                        },
                        new
                        {
                            MealID = 4,
                            Calories = 180,
                            Carbs = 25,
                            Description = "حمص بالطحينة متبل بزيت الزيتون والليمون، مزين بحبات الحمص الكاملة والبقدونس.",
                            Fat = 9,
                            MealCategory = "الإفطار",
                            MealName = "حمص بالطحينة",
                            MealType = "طبق جانبي",
                            PicturePath = "/images/meal.png",
                            Protein = 8
                        },
                        new
                        {
                            MealID = 5,
                            Calories = 5,
                            Carbs = 1,
                            Description = "شاي عربي معطر بالهيل والزعفران، يقدم ساخناً في أكواب تقليدية.",
                            Fat = 0,
                            MealCategory = "الإفطار",
                            MealName = "شاي عربي",
                            MealType = "مشروب",
                            PicturePath = "/images/meal.png",
                            Protein = 0
                        },
                        new
                        {
                            MealID = 6,
                            Calories = 120,
                            Carbs = 28,
                            Description = "عصير برتقال طازج معصور في المطعم، غني بفيتامين سي والمذاق المنعش.",
                            Fat = 0,
                            MealCategory = "الإفطار",
                            MealName = "عصير برتقال طازج",
                            MealType = "مشروب",
                            PicturePath = "/images/meal.png",
                            Protein = 1
                        },
                        new
                        {
                            MealID = 7,
                            Calories = 450,
                            Carbs = 55,
                            Description = "كبسة لحم سعودية تقليدية، مطبوخة ببهارات الكبسة المميزة مع قطع اللحم الطرية والأرز البسمتي.",
                            Fat = 15,
                            MealCategory = "الغداء",
                            MealName = "كبسة لحم",
                            MealType = "الطبق الرئيسي",
                            PicturePath = "/images/meal.png",
                            Protein = 28
                        },
                        new
                        {
                            MealID = 8,
                            Calories = 350,
                            Carbs = 0,
                            Description = "دجاج مشوي متبل بالأعشاب والبهارات العربية، مشوي على الفحم ليكتسب نكهة مميزة.",
                            Fat = 20,
                            MealCategory = "الغداء",
                            MealName = "دجاج مشوي",
                            MealType = "الطبق الرئيسي",
                            PicturePath = "/images/meal.png",
                            Protein = 30
                        },
                        new
                        {
                            MealID = 9,
                            Calories = 65,
                            Carbs = 12,
                            Description = "سلطة خضراء منعشة مع خضروات موسمية طازجة وتتبيلة خاصة بالمطعم.",
                            Fat = 2,
                            MealCategory = "الغداء",
                            MealName = "سلطة خضراء",
                            MealType = "طبق جانبي",
                            PicturePath = "/images/meal.png",
                            Protein = 3
                        },
                        new
                        {
                            MealID = 10,
                            Calories = 180,
                            Carbs = 30,
                            Description = "شوربة عدس تقليدية، مطبوخة بالطريقة العربية مع البهارات والليمون وزيت الزيتون.",
                            Fat = 5,
                            MealCategory = "الغداء",
                            MealName = "شوربة عدس",
                            MealType = "طبق جانبي",
                            PicturePath = "/images/meal.png",
                            Protein = 10
                        },
                        new
                        {
                            MealID = 11,
                            Calories = 350,
                            Carbs = 52,
                            Description = "أم علي، حلوى مصرية شهيرة مصنوعة من العجينة الهشة والمكسرات والحليب والقشطة.",
                            Fat = 15,
                            MealCategory = "الغداء",
                            MealName = "أم علي",
                            MealType = "حلوى",
                            PicturePath = "/images/meal.png",
                            Protein = 8
                        },
                        new
                        {
                            MealID = 12,
                            Calories = 90,
                            Carbs = 12,
                            Description = "لبن عيران منعش، مشروب تقليدي من اللبن المخفوق مع الماء والنعناع والملح.",
                            Fat = 5,
                            MealCategory = "الغداء",
                            MealName = "لبن عيران",
                            MealType = "مشروب",
                            PicturePath = "/images/meal.png",
                            Protein = 8
                        },
                        new
                        {
                            MealID = 13,
                            Calories = 380,
                            Carbs = 40,
                            Description = "شاورما دجاج عربية تقليدية، مشوية على السيخ ومقدمة مع الخبز العربي والطحينة والخضروات.",
                            Fat = 20,
                            MealCategory = "العشاء",
                            MealName = "شاورما دجاج",
                            MealType = "الطبق الرئيسي",
                            PicturePath = "/images/meal.png",
                            Protein = 25
                        },
                        new
                        {
                            MealID = 14,
                            Calories = 420,
                            Carbs = 35,
                            Description = "برجر لحم محضر من اللحم البقري الطازج 100% مع الخضروات والصلصة الخاصة، يقدم مع خبز البرجر المحمص.",
                            Fat = 25,
                            MealCategory = "العشاء",
                            MealName = "برجر لحم",
                            MealType = "الطبق الرئيسي",
                            PicturePath = "/images/meal.png",
                            Protein = 28
                        },
                        new
                        {
                            MealID = 15,
                            Calories = 365,
                            Carbs = 48,
                            Description = "بطاطس مقلية مقرمشة من الخارج وطرية من الداخل، تقدم مع الكاتشب والمايونيز.",
                            Fat = 18,
                            MealCategory = "العشاء",
                            MealName = "بطاطس مقلية",
                            MealType = "طبق جانبي",
                            PicturePath = "/images/meal.png",
                            Protein = 4
                        },
                        new
                        {
                            MealID = 16,
                            Calories = 150,
                            Carbs = 15,
                            Description = "سلطة سيزر كلاسيكية مع خس رومين، جبن البارميزان، قطع خبز محمصة، وصلصة سيزر المميزة.",
                            Fat = 10,
                            MealCategory = "العشاء",
                            MealName = "سلطة سيزر",
                            MealType = "طبق جانبي",
                            PicturePath = "/images/meal.png",
                            Protein = 8
                        },
                        new
                        {
                            MealID = 17,
                            Calories = 400,
                            Carbs = 58,
                            Description = "كنافة عربية تقليدية محشوة بالجبنة الحلوة ومغطاة بالقطر ومزينة بالفستق الحلبي.",
                            Fat = 20,
                            MealCategory = "العشاء",
                            MealName = "كنافة",
                            MealType = "حلوى",
                            PicturePath = "/images/meal.png",
                            Protein = 6
                        },
                        new
                        {
                            MealID = 18,
                            Calories = 80,
                            Carbs = 20,
                            Description = "عصير ليمون طازج ومنعش مع النعناع، مثالي لتنشيط الجسم وتعزيز المناعة.",
                            Fat = 0,
                            MealCategory = "العشاء",
                            MealName = "عصير ليمون بالنعناع",
                            MealType = "مشروب",
                            PicturePath = "/images/meal.png",
                            Protein = 1
                        },
                        new
                        {
                            MealID = 19,
                            Calories = 120,
                            Carbs = 28,
                            Description = "عصير برتقال طازج معصور من أجود أنواع البرتقال، غني بالفيتامينات والمعادن.",
                            Fat = 0,
                            MealCategory = "الإفطار",
                            MealName = "عصير برتقال طازج",
                            MealType = "مشروب",
                            PicturePath = "/images/meal.png",
                            Protein = 1
                        },
                        new
                        {
                            MealID = 20,
                            Calories = 420,
                            Carbs = 63,
                            Description = "كعكة الشوكولاتة الغنية بطبقات الشوكولاتة الداكنة والكريمة، مثالية لمحبي الحلويات.",
                            Fat = 22,
                            MealCategory = "العشاء",
                            MealName = "كعكة الشوكولاتة",
                            MealType = "حلوى",
                            PicturePath = "/images/meal.png",
                            Protein = 5
                        });
                });

            modelBuilder.Entity("KauRestaurant.Models.Menu", b =>
                {
                    b.Property<int>("MenuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuID"));

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("MenuID");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            MenuID = 1,
                            Day = "الأحد"
                        },
                        new
                        {
                            MenuID = 2,
                            Day = "الإثنين"
                        },
                        new
                        {
                            MenuID = 3,
                            Day = "الثلاثاء"
                        },
                        new
                        {
                            MenuID = 4,
                            Day = "الأربعاء"
                        },
                        new
                        {
                            MenuID = 5,
                            Day = "الخميس"
                        },
                        new
                        {
                            MenuID = 6,
                            Day = "الجمعة"
                        },
                        new
                        {
                            MenuID = 7,
                            Day = "السبت"
                        });
                });

            modelBuilder.Entity("KauRestaurant.Models.MenuMeal", b =>
                {
                    b.Property<int>("MenuMealID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuMealID"));

                    b.Property<int>("MealID")
                        .HasColumnType("int");

                    b.Property<int>("MenuID")
                        .HasColumnType("int");

                    b.HasKey("MenuMealID");

                    b.HasIndex("MealID");

                    b.HasIndex("MenuID");

                    b.ToTable("MenuMeals", (string)null);

                    b.HasData(
                        new
                        {
                            MenuMealID = 1,
                            MealID = 1,
                            MenuID = 1
                        },
                        new
                        {
                            MenuMealID = 2,
                            MealID = 2,
                            MenuID = 1
                        },
                        new
                        {
                            MenuMealID = 3,
                            MealID = 3,
                            MenuID = 1
                        },
                        new
                        {
                            MenuMealID = 4,
                            MealID = 4,
                            MenuID = 1
                        },
                        new
                        {
                            MenuMealID = 5,
                            MealID = 5,
                            MenuID = 1
                        },
                        new
                        {
                            MenuMealID = 6,
                            MealID = 6,
                            MenuID = 1
                        },
                        new
                        {
                            MenuMealID = 7,
                            MealID = 7,
                            MenuID = 1
                        },
                        new
                        {
                            MenuMealID = 8,
                            MealID = 8,
                            MenuID = 1
                        },
                        new
                        {
                            MenuMealID = 9,
                            MealID = 9,
                            MenuID = 1
                        },
                        new
                        {
                            MenuMealID = 10,
                            MealID = 10,
                            MenuID = 1
                        },
                        new
                        {
                            MenuMealID = 11,
                            MealID = 11,
                            MenuID = 1
                        },
                        new
                        {
                            MenuMealID = 12,
                            MealID = 12,
                            MenuID = 1
                        },
                        new
                        {
                            MenuMealID = 13,
                            MealID = 13,
                            MenuID = 1
                        },
                        new
                        {
                            MenuMealID = 14,
                            MealID = 14,
                            MenuID = 1
                        },
                        new
                        {
                            MenuMealID = 15,
                            MealID = 15,
                            MenuID = 1
                        },
                        new
                        {
                            MenuMealID = 16,
                            MealID = 16,
                            MenuID = 1
                        },
                        new
                        {
                            MenuMealID = 17,
                            MealID = 17,
                            MenuID = 1
                        },
                        new
                        {
                            MenuMealID = 18,
                            MealID = 18,
                            MenuID = 1
                        },
                        new
                        {
                            MenuMealID = 19,
                            MealID = 19,
                            MenuID = 2
                        },
                        new
                        {
                            MenuMealID = 20,
                            MealID = 1,
                            MenuID = 2
                        },
                        new
                        {
                            MenuMealID = 21,
                            MealID = 7,
                            MenuID = 2
                        },
                        new
                        {
                            MenuMealID = 22,
                            MealID = 13,
                            MenuID = 2
                        },
                        new
                        {
                            MenuMealID = 23,
                            MealID = 20,
                            MenuID = 3
                        },
                        new
                        {
                            MenuMealID = 24,
                            MealID = 2,
                            MenuID = 3
                        },
                        new
                        {
                            MenuMealID = 25,
                            MealID = 8,
                            MenuID = 3
                        },
                        new
                        {
                            MenuMealID = 26,
                            MealID = 14,
                            MenuID = 3
                        },
                        new
                        {
                            MenuMealID = 27,
                            MealID = 3,
                            MenuID = 4
                        },
                        new
                        {
                            MenuMealID = 28,
                            MealID = 9,
                            MenuID = 4
                        },
                        new
                        {
                            MenuMealID = 29,
                            MealID = 15,
                            MenuID = 4
                        },
                        new
                        {
                            MenuMealID = 30,
                            MealID = 19,
                            MenuID = 4
                        },
                        new
                        {
                            MenuMealID = 31,
                            MealID = 4,
                            MenuID = 5
                        },
                        new
                        {
                            MenuMealID = 32,
                            MealID = 10,
                            MenuID = 5
                        },
                        new
                        {
                            MenuMealID = 33,
                            MealID = 16,
                            MenuID = 5
                        },
                        new
                        {
                            MenuMealID = 34,
                            MealID = 20,
                            MenuID = 5
                        });
                });

            modelBuilder.Entity("KauRestaurant.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<int>("BreakfastTicketsCount")
                        .HasColumnType("int");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DinnerTicketsCount")
                        .HasColumnType("int");

                    b.Property<int>("LunchTicketsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalPaid")
                        .HasColumnType("real");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KauRestaurant.Models.Restaurant", b =>
                {
                    b.Property<int>("RestaurantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan?>("FridayBreakfastCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("FridayBreakfastOpenTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("FridayDinnerCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("FridayDinnerOpenTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("FridayLunchCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("FridayLunchOpenTime")
                        .HasColumnType("time");

                    b.Property<bool>("FridayServesBreakfast")
                        .HasColumnType("bit");

                    b.Property<bool>("FridayServesDinner")
                        .HasColumnType("bit");

                    b.Property<bool>("FridayServesLunch")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFridayOpen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMondayOpen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSaturdayOpen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSundayOpen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThursdayOpen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTuesdayOpen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWednesdayOpen")
                        .HasColumnType("bit");

                    b.Property<string>("LocationUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<TimeSpan?>("MondayBreakfastCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("MondayBreakfastOpenTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("MondayDinnerCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("MondayDinnerOpenTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("MondayLunchCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("MondayLunchOpenTime")
                        .HasColumnType("time");

                    b.Property<bool>("MondayServesBreakfast")
                        .HasColumnType("bit");

                    b.Property<bool>("MondayServesDinner")
                        .HasColumnType("bit");

                    b.Property<bool>("MondayServesLunch")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<TimeSpan?>("SaturdayBreakfastCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("SaturdayBreakfastOpenTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("SaturdayDinnerCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("SaturdayDinnerOpenTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("SaturdayLunchCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("SaturdayLunchOpenTime")
                        .HasColumnType("time");

                    b.Property<bool>("SaturdayServesBreakfast")
                        .HasColumnType("bit");

                    b.Property<bool>("SaturdayServesDinner")
                        .HasColumnType("bit");

                    b.Property<bool>("SaturdayServesLunch")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("SundayBreakfastCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("SundayBreakfastOpenTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("SundayDinnerCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("SundayDinnerOpenTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("SundayLunchCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("SundayLunchOpenTime")
                        .HasColumnType("time");

                    b.Property<bool>("SundayServesBreakfast")
                        .HasColumnType("bit");

                    b.Property<bool>("SundayServesDinner")
                        .HasColumnType("bit");

                    b.Property<bool>("SundayServesLunch")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("ThursdayBreakfastCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("ThursdayBreakfastOpenTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("ThursdayDinnerCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("ThursdayDinnerOpenTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("ThursdayLunchCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("ThursdayLunchOpenTime")
                        .HasColumnType("time");

                    b.Property<bool>("ThursdayServesBreakfast")
                        .HasColumnType("bit");

                    b.Property<bool>("ThursdayServesDinner")
                        .HasColumnType("bit");

                    b.Property<bool>("ThursdayServesLunch")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("TuesdayBreakfastCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("TuesdayBreakfastOpenTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("TuesdayDinnerCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("TuesdayDinnerOpenTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("TuesdayLunchCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("TuesdayLunchOpenTime")
                        .HasColumnType("time");

                    b.Property<bool>("TuesdayServesBreakfast")
                        .HasColumnType("bit");

                    b.Property<bool>("TuesdayServesDinner")
                        .HasColumnType("bit");

                    b.Property<bool>("TuesdayServesLunch")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("WednesdayBreakfastCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WednesdayBreakfastOpenTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WednesdayDinnerCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WednesdayDinnerOpenTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WednesdayLunchCloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WednesdayLunchOpenTime")
                        .HasColumnType("time");

                    b.Property<bool>("WednesdayServesBreakfast")
                        .HasColumnType("bit");

                    b.Property<bool>("WednesdayServesDinner")
                        .HasColumnType("bit");

                    b.Property<bool>("WednesdayServesLunch")
                        .HasColumnType("bit");

                    b.HasKey("RestaurantID");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            RestaurantID = 1,
                            Address = "جامعة الملك عبد العزيز، جدة، المملكة العربية السعودية",
                            Description = "في المطعم الجامعي الرسمي لجامعة الملك عبد العزيز، نقدم وجبات طازجة وعالية الجودة للطلاب وأعضاء هيئة التدريس. نحرص على تقديم أطباق متنوعة ومغذية في بيئة نظيفة ومرحبة.",
                            Email = "restaurant@kau.edu.sa",
                            FridayBreakfastCloseTime = new TimeSpan(0, 10, 30, 0, 0),
                            FridayBreakfastOpenTime = new TimeSpan(0, 7, 0, 0, 0),
                            FridayDinnerCloseTime = new TimeSpan(0, 10, 30, 0, 0),
                            FridayDinnerOpenTime = new TimeSpan(0, 7, 0, 0, 0),
                            FridayLunchCloseTime = new TimeSpan(0, 10, 30, 0, 0),
                            FridayLunchOpenTime = new TimeSpan(0, 7, 0, 0, 0),
                            FridayServesBreakfast = true,
                            FridayServesDinner = true,
                            FridayServesLunch = true,
                            IsFridayOpen = true,
                            IsMondayOpen = true,
                            IsSaturdayOpen = true,
                            IsSundayOpen = true,
                            IsThursdayOpen = true,
                            IsTuesdayOpen = true,
                            IsWednesdayOpen = true,
                            LocationUrl = "https://maps.app.goo.gl/KFBdpmH7E88Lzvy49",
                            MondayBreakfastCloseTime = new TimeSpan(0, 10, 30, 0, 0),
                            MondayBreakfastOpenTime = new TimeSpan(0, 7, 0, 0, 0),
                            MondayDinnerCloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            MondayDinnerOpenTime = new TimeSpan(0, 18, 0, 0, 0),
                            MondayLunchCloseTime = new TimeSpan(0, 15, 0, 0, 0),
                            MondayLunchOpenTime = new TimeSpan(0, 12, 0, 0, 0),
                            MondayServesBreakfast = true,
                            MondayServesDinner = true,
                            MondayServesLunch = true,
                            Name = "مطعم جامعة الملك عبدالعزيز",
                            PhoneNumber = "+9665********",
                            PhotoPath = "/images/restaurant.png",
                            SaturdayBreakfastCloseTime = new TimeSpan(0, 10, 30, 0, 0),
                            SaturdayBreakfastOpenTime = new TimeSpan(0, 7, 0, 0, 0),
                            SaturdayDinnerCloseTime = new TimeSpan(0, 10, 30, 0, 0),
                            SaturdayDinnerOpenTime = new TimeSpan(0, 7, 0, 0, 0),
                            SaturdayLunchCloseTime = new TimeSpan(0, 10, 30, 0, 0),
                            SaturdayLunchOpenTime = new TimeSpan(0, 7, 0, 0, 0),
                            SaturdayServesBreakfast = true,
                            SaturdayServesDinner = true,
                            SaturdayServesLunch = true,
                            SundayBreakfastCloseTime = new TimeSpan(0, 10, 30, 0, 0),
                            SundayBreakfastOpenTime = new TimeSpan(0, 7, 0, 0, 0),
                            SundayDinnerCloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            SundayDinnerOpenTime = new TimeSpan(0, 18, 0, 0, 0),
                            SundayLunchCloseTime = new TimeSpan(0, 15, 0, 0, 0),
                            SundayLunchOpenTime = new TimeSpan(0, 12, 0, 0, 0),
                            SundayServesBreakfast = true,
                            SundayServesDinner = true,
                            SundayServesLunch = true,
                            ThursdayBreakfastCloseTime = new TimeSpan(0, 10, 30, 0, 0),
                            ThursdayBreakfastOpenTime = new TimeSpan(0, 7, 0, 0, 0),
                            ThursdayDinnerCloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            ThursdayDinnerOpenTime = new TimeSpan(0, 18, 0, 0, 0),
                            ThursdayLunchCloseTime = new TimeSpan(0, 15, 0, 0, 0),
                            ThursdayLunchOpenTime = new TimeSpan(0, 12, 0, 0, 0),
                            ThursdayServesBreakfast = true,
                            ThursdayServesDinner = true,
                            ThursdayServesLunch = true,
                            TuesdayBreakfastCloseTime = new TimeSpan(0, 10, 30, 0, 0),
                            TuesdayBreakfastOpenTime = new TimeSpan(0, 7, 0, 0, 0),
                            TuesdayDinnerCloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            TuesdayDinnerOpenTime = new TimeSpan(0, 18, 0, 0, 0),
                            TuesdayLunchCloseTime = new TimeSpan(0, 15, 0, 0, 0),
                            TuesdayLunchOpenTime = new TimeSpan(0, 12, 0, 0, 0),
                            TuesdayServesBreakfast = true,
                            TuesdayServesDinner = true,
                            TuesdayServesLunch = true,
                            WednesdayBreakfastCloseTime = new TimeSpan(0, 10, 30, 0, 0),
                            WednesdayBreakfastOpenTime = new TimeSpan(0, 7, 0, 0, 0),
                            WednesdayDinnerCloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            WednesdayDinnerOpenTime = new TimeSpan(0, 18, 0, 0, 0),
                            WednesdayLunchCloseTime = new TimeSpan(0, 15, 0, 0, 0),
                            WednesdayLunchOpenTime = new TimeSpan(0, 12, 0, 0, 0),
                            WednesdayServesBreakfast = true,
                            WednesdayServesDinner = true,
                            WednesdayServesLunch = true
                        });
                });

            modelBuilder.Entity("KauRestaurant.Models.Review", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewID"));

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MealID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("ReviewID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("MealID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("KauRestaurant.Models.Terms", b =>
                {
                    b.Property<int>("TermID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TermID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TermID");

                    b.ToTable("Terms");

                    b.HasData(
                        new
                        {
                            TermID = 1,
                            Content = "تنطبق هذه الشروط والأحكام على جميع الخدمات المقدمة من مطعم جامعة الملك عبدالعزيز.",
                            DisplayOrder = 1,
                            LastUpdated = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "عام"
                        },
                        new
                        {
                            TermID = 2,
                            Content = "جميع المبيعات نهائية ولا يمكن استرداد قيمة التذاكر بعد الشراء. يجب استخدام التذاكر خلال الفصل الدراسي الذي تم شراؤها فيه. التذاكر غير قابلة للتحويل ويجب استخدامها من قبل مالك الحساب فقط.",
                            DisplayOrder = 2,
                            LastUpdated = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "التذاكر والدفع"
                        },
                        new
                        {
                            TermID = 3,
                            Content = "يتعهد المستخدم بعدم إساءة استخدام الخدمة أو محاولة التحايل على النظام. يحتفظ المطعم بالحق في رفض الخدمة لأي شخص ينتهك هذه الشروط.",
                            DisplayOrder = 3,
                            LastUpdated = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "الاستخدام"
                        },
                        new
                        {
                            TermID = 4,
                            Content = "نحن نحترم خصوصيتك ونلتزم بحماية بياناتك الشخصية وفقاً لسياسة الخصوصية الخاصة بنا.",
                            DisplayOrder = 4,
                            LastUpdated = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "الخصوصية"
                        },
                        new
                        {
                            TermID = 5,
                            Content = "يحتفظ المطعم بالحق في تعديل هذه الشروط في أي وقت. سيتم نشر التغييرات على موقعنا.",
                            DisplayOrder = 5,
                            LastUpdated = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "التغييرات على الشروط"
                        });
                });

            modelBuilder.Entity("KauRestaurant.Models.Ticket", b =>
                {
                    b.Property<int>("TicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketID"));

                    b.Property<bool>("IsRedeemed")
                        .HasColumnType("bit");

                    b.Property<string>("MealType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TicketID");

                    b.HasIndex("OrderID");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("KauRestaurant.Models.TicketPrice", b =>
                {
                    b.Property<int>("TicketPriceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketPriceID"));

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("MealType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("TicketPriceID");

                    b.ToTable("TicketPrices");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KauRestaurant.Models.Feedback", b =>
                {
                    b.HasOne("KauRestaurant.Areas.Identity.Data.KauRestaurantUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KauRestaurant.Models.MenuMeal", b =>
                {
                    b.HasOne("KauRestaurant.Models.Meal", "Meal")
                        .WithMany("MenuMeals")
                        .HasForeignKey("MealID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KauRestaurant.Models.Menu", "Menu")
                        .WithMany("MenuMeals")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("KauRestaurant.Models.Order", b =>
                {
                    b.HasOne("KauRestaurant.Areas.Identity.Data.KauRestaurantUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("KauRestaurant.Models.Review", b =>
                {
                    b.HasOne("KauRestaurant.Areas.Identity.Data.KauRestaurantUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KauRestaurant.Models.Meal", "Meal")
                        .WithMany("Reviews")
                        .HasForeignKey("MealID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("KauRestaurant.Models.Ticket", b =>
                {
                    b.HasOne("KauRestaurant.Models.Order", "Order")
                        .WithMany("Tickets")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KauRestaurant.Areas.Identity.Data.KauRestaurantUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KauRestaurant.Areas.Identity.Data.KauRestaurantUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KauRestaurant.Areas.Identity.Data.KauRestaurantUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KauRestaurant.Areas.Identity.Data.KauRestaurantUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KauRestaurant.Models.Meal", b =>
                {
                    b.Navigation("MenuMeals");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("KauRestaurant.Models.Menu", b =>
                {
                    b.Navigation("MenuMeals");
                });

            modelBuilder.Entity("KauRestaurant.Models.Order", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
